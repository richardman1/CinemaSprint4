<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Adress" xml:space="preserve">
    <value>Adress:</value>
  </data>
  <data name="AdressInvalid" xml:space="preserve">
    <value>Enter a valid adress</value>
  </data>
  <data name="AdressNumber" xml:space="preserve">
    <value>Number:</value>
  </data>
  <data name="AdressRequired" xml:space="preserve">
    <value>Enter an adress</value>
  </data>
  <data name="ButtonCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ButtonNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="ButtonPay" xml:space="preserve">
    <value>Payment</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City:</value>
  </data>
  <data name="CityInvalid" xml:space="preserve">
    <value>Enter a valid city</value>
  </data>
  <data name="CityRequired" xml:space="preserve">
    <value>Enter a city</value>
  </data>
  <data name="CodeSuccess" xml:space="preserve">
    <value>You may now pick up your order with the following code: </value>
  </data>
  <data name="ComingSoon" xml:space="preserve">
    <value>Coming soon</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Your Email:</value>
  </data>
  <data name="EmailExists" xml:space="preserve">
    <value>U are already subscribed to the newsletter</value>
  </data>
  <data name="EmailInvalid" xml:space="preserve">
    <value>Email is not valid</value>
  </data>
  <data name="EmailNotFound" xml:space="preserve">
    <value>The email adress has not been found</value>
  </data>
  <data name="EmailRemoved" xml:space="preserve">
    <value>The email adress has been removed</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="EmailSubscribed" xml:space="preserve">
    <value>U have been successfully subscribed to the CinemA newsletter</value>
  </data>
  <data name="HomePopular" xml:space="preserve">
    <value>Popular movies</value>
  </data>
  <data name="HomeTickets" xml:space="preserve">
    <value>Order now!</value>
  </data>
  <data name="HomeWelcome" xml:space="preserve">
    <value>Welcome to CinemA. An unforgettable experience.</value>
  </data>
  <data name="InfoSucces" xml:space="preserve">
    <value>Deze code kunt u invoeren bij de touchscreens bij de bioscoop.&lt;br /&gt;
    &lt;br /&gt;
    Onthoud deze code goed of bewaar deze op de email die u nu zult ontvangen.&lt;br /&gt;
    &lt;br /&gt;
    U kunt uw kaarten ook uitprinten met het pdf bestand dat nu gedownload wordt.&lt;br /&gt;
    &lt;br /&gt;</value>
  </data>
  <data name="MenuCinemas" xml:space="preserve">
    <value>Cinemas</value>
  </data>
  <data name="MenuHome" xml:space="preserve">
    <value>Homepage</value>
  </data>
  <data name="MenuMovies" xml:space="preserve">
    <value>Movies</value>
  </data>
  <data name="MenuNews" xml:space="preserve">
    <value>Newsletter</value>
  </data>
  <data name="MenuNow" xml:space="preserve">
    <value>Now playing</value>
  </data>
  <data name="MovieClassification" xml:space="preserve">
    <value>Classification</value>
  </data>
  <data name="MovieDescription" xml:space="preserve">
    <value>EN</value>
  </data>
  <data name="MovieDirector" xml:space="preserve">
    <value>Director</value>
  </data>
  <data name="MovieDuration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="MovieGenre" xml:space="preserve">
    <value>Genre</value>
  </data>
  <data name="MovieLanguage" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="MovieOverviewHeader" xml:space="preserve">
    <value>All movies</value>
  </data>
  <data name="MovieRating" xml:space="preserve">
    <value>IMDB Rating</value>
  </data>
  <data name="MovieSpecs" xml:space="preserve">
    <value>Specifications</value>
  </data>
  <data name="MovieSubtitles" xml:space="preserve">
    <value>Subtitles</value>
  </data>
  <data name="MovieTicketHeader" xml:space="preserve">
    <value>Tickets and Shows</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Your name:</value>
  </data>
  <data name="NameLong" xml:space="preserve">
    <value>Must be less then 50 characters</value>
  </data>
  <data name="NameRequired" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="NewsletterHeader" xml:space="preserve">
    <value>Newsletter</value>
  </data>
  <data name="NewsletterInfo" xml:space="preserve">
    <value>For the latest news and deals subscribe to the newsletter. You will receive the CinemA InfoLetter 2 times a month in your mailbox.</value>
  </data>
  <data name="NowOverviewHeader" xml:space="preserve">
    <value>Movies this week</value>
  </data>
  <data name="NumberInvalid" xml:space="preserve">
    <value>Enter a valid house number</value>
  </data>
  <data name="NumberRequired" xml:space="preserve">
    <value>Enter a house number</value>
  </data>
  <data name="OrderChoice" xml:space="preserve">
    <value>Movie Choice</value>
  </data>
  <data name="OrderHeader" xml:space="preserve">
    <value>Order Tickets</value>
  </data>
  <data name="OrderSeats" xml:space="preserve">
    <value>Total available seats:</value>
  </data>
  <data name="OrderTableAmount" xml:space="preserve">
    <value>Ticket amount</value>
  </data>
  <data name="OrderTablePrice" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="OrderTableTariff" xml:space="preserve">
    <value>Tariff</value>
  </data>
  <data name="OrderTableTotal" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="OverviewToday" xml:space="preserve">
    <value>Showing for today</value>
  </data>
  <data name="PaymentHeader" xml:space="preserve">
    <value>Payment</value>
  </data>
  <data name="PaymentRequired" xml:space="preserve">
    <value>Select a payment type</value>
  </data>
  <data name="PaymentReserve" xml:space="preserve">
    <value>Reserve now</value>
  </data>
  <data name="PaymentSucces" xml:space="preserve">
    <value>Your payment was succesfull!</value>
  </data>
  <data name="PaymentType" xml:space="preserve">
    <value>Payment type:</value>
  </data>
  <data name="Questionnaire" xml:space="preserve">
    <value>Questionnaire</value>
  </data>
  <data name="Review" xml:space="preserve">
    <value>Review a movie</value>
  </data>
  <data name="Screen" xml:space="preserve">
    <value>Screen</value>
  </data>
  <data name="Subscribe" xml:space="preserve">
    <value>Subscribe</value>
  </data>
  <data name="Unsubscribe" xml:space="preserve">
    <value>Unsubscribe</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Zip Code:</value>
  </data>
  <data name="ZipCodeInvalid" xml:space="preserve">
    <value>Enter a valid zip code</value>
  </data>
  <data name="ZipCodeRequired" xml:space="preserve">
    <value>Enter a zip code</value>
  </data>
</root>